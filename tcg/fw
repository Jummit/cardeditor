--variables
cardback = paintutils.loadImage("/tcg/images/background")
deckimage = paintutils.loadImage("/tcg/images/deck")
cardimage = paintutils.loadImage("/tcg/imagea/smallcard")
winW, winH = term.getSize()
imageW=9
imageH=4
sideCards = 4
cardW = 10
cardH = 12
cardX = math.floor(winW/2-cardW/2)
cardY = 3
textH = 4
textW = 6
textW = cardW-2
textX = math.floor(winW/2-textW/2)
textY = math.floor(winH/2-textH/2)

--functions
function boxclicked(x, y, w, h, mx, my)
	if mx>=x and my>=y and mx<=x+w-1 and my<=y+h-1 then
		return true
	end
end

function button(x,y,w,h,title,backcol,textcol, func, nodraw, mousebutton)
	if not mousebutton then mousebutton = 1 end
	if not w then w = #title+2 end
	if not backcol then backcol = "gray" end
	if not textcol then textcol = "white" end
	return {
		x=x,y=y,w=w,h=h, type="button", nodraw=nodraw, mousebutton=mousebutton,
		backcol=backcol,textcol=textcol,
		title=title,
		func=func,
		draw = function(self)
			if not self.nodraw then
				paintutils.drawFilledBox(self.x, self.y, self.x+self.w-1, self.y+self.h-1, colors[self.backcol])
				term.setCursorPos(self.x+math.ceil(self.w/2-#self.title/2), self.y+math.ceil(self.h/2)-1)
				term.setTextColor(colors[self.textcol])
				io.write(self.title)
			end
		end,
		update = function(self, event, mouse, mx, my)
			if event == "mouse_click" and mouse==self.mousebutton then
				if boxclicked(self.x, self.y, self.w, self.h, mx, my) then
					return self.func(self)
				end
			end
		end
	}
end

function textbox(x,y,w,h,title,backcol,textcol,barcol, func, text, nodraw)
	if not backcol then backcol = "gray" end
	if not textcol then textcol = "white" end
	if not barcol then barcol = "black" end
	if not text then text = "" end
	return {
		x=x,y=y,w=w,h=h, type="textbox",
		backcol=backcol,textcol=textcol,barcol=barcol,
		title=title, text=text,
		func=func,
		draw = function(self)
			if #self.text+4>self.w then
				if self.x~= 1 then self.x = self.x-0.2 end
			elseif #self.text+4>self.w then
				self.x = self.x+0.5
			end
			self.w = #self.text+4
			if self.w<#self.title then self.w = #self.title end
			if not self.nodraw then
				paintutils.drawFilledBox(self.x, self.y, self.x+self.w, self.y+self.h, colors[self.backcol])
				paintutils.drawLine(self.x+2, self.y+math.ceil(self.h/2), self.x+self.w-2, self.y+math.ceil(self.h/2), colors[barcol])
				term.setCursorPos(self.x, self.y)
				term.setBackgroundColor(colors[self.backcol])
				print(self.title)
			end
			term.setTextColor(colors[self.textcol])
			term.setBackgroundColor(colors[self.barcol])
			term.setCursorPos(self.x+2, self.y+math.ceil(self.h/2))
			print(self.text)
		end,
		update = function(self, event, key)
			local char = ""

			if event == "char" then
				char = key
			elseif event == "key" then
				local key = keys.getName(key)
				if key == "enter" then
					if self.func then self.func(self.text) end
					return self.text
				elseif key == "backspace" then
					self.text = string.sub(self.text, 1, #self.text-1)
				end
			end
			self.text = self.text..char
		end
	}
end

function newCard(title, description, image)
	return {
		title=title,
		description=description,
		image=image,
		script = false
	}
end

function drawCard(cardX, cardY, card)
	card.paintimage = paintutils.loadImage("tcg/cards/images/"..card.image)
	paintutils.drawImage(cardback, cardX, cardY)
	paintutils.drawImage(card.paintimage, cardX+1, cardY+3)
	term.setBackgroundColor(colors.lightGray)
	term.setCursorPos(cardX+1, cardY+1) print(string.sub(card.title, 1, 9))
	for i = 0, 2 do
		term.setCursorPos(cardX+1, cardY+8+i)
		local text = string.sub(card.description, i*9+1, i*9+9)
		while true do
			if string.sub(text, 1, 1) == " " then
				text = string.sub(text, 2, #text)
			else
				break
			end
			local text = string.sub(card.description, i*9+1, i*9+9)
		end
		print(text)
	end
end

function text(name, func, text)
	return fw.textbox(fw.textX, fw.textY, fw.textW, fw.textH, name, nil, nil, nil, func, text)
end

function saveCard(cards, filename)
	if cards.title then
		cards = {cards}
	end
	local file = io.open("/tcg/cards/"..filename, "w")
	if file then
		for _, card in pairs(cards) do
			if card.title ~= "" then
				file:write(card.title.."\n")
				file:write(card.description.."\n")
				file:write(card.image.."\n")
				if not card.script then
					file:write("\n")
				else
					file:write(card.script.."\n")
				end
			end
		end
		file:close()
	end
end

function loadCard(filename)
	local cards = {}
	if #filename>0 then
		local file = io.open("/tcg/cards/"..filename, "r")
		if file then
			while true do
				local line = file:read()
				if line then
					table.insert(
						cards,
						{
							title = line,
							description = file:read(),
							image = file:read(),
							script = file:read()
						}
					)
				else
					break
				end
			end
			file:close()
		end
	end
	if #cards == 1 then
		return cards[1]
	elseif #cards > 1 then
		return cards
	else
		return false
	end
end

function draw(elements, backcol)
	if backcol then
		term.setBackgroundColor(colors[backcol])
		term.clear()
	end
	for k, element in pairs(elements) do
		element:draw()
	end
end

function update(elements, event, var1, var2, var3)
	if event == "terminate" then error() end
	local vars = {}
	for k, element in pairs(elements) do
		vars[k] = element.update(element, event, var1, var2, var3)
	end
	for k, var in pairs(vars) do
		if type(var) == "string" then elements[k] = nil end
	end
	return vars
end

function exit()
	term.setBackgroundColor(colors.black)
	term.setCursorPos(1, 1)
	term.clear()
	error()
end
